import React, { useState, useEffect, useCallback, useMemo, createContext, useContext } from 'react';
import Sidebar from './components/Sidebar.tsx';
import NoteList from './components/NoteList.tsx';
import NoteEditor from './components/NoteEditor.tsx';
import TopBar from './components/TopBar.tsx';
import SettingsModal from './components/SettingsModal.tsx';
import ProfilePage from './components/ProfilePage.tsx';
import Auth from './components/Auth.tsx';
import ShareModal from './components/ShareModal.tsx';
import SharedNoteViewer from './components/SharedNoteViewer.tsx';
import CustomCursor from './components/CustomCursor.tsx';
import AdminDashboard from './components/AdminDashboard.tsx';
import HomePage from './components/HomePage.tsx';
import DiscussionPage from './components/DiscussionPage.tsx';
import { Note, Theme, User, CursorStyle, DiscussionThread, DiscussionPost, Community, WebConfig, Publication } from './types.ts';
import { summarizeNote } from './services/geminiService.ts';
import { backstage } from './services/backstage.ts';
import { appThemes } from './styles/themes.ts';

export type Language = 'en' | 'fr' | 'zh';

const translations = {
  en: {
    common: {
      notes: "Notes",
      save: "Save",
      cancel: "Cancel",
      close: "Close",
      delete: "Delete",
      untitledNote: "Untitled Note",
      newNote: "New Note",
      loading: "Loading...",
      by: "By",
      post: "post",
      posts: "posts",
      send: "Send",
      publish: "Publish",
      reject: "Reject",
      back: "Back",
    },
    auth: {
      createAccountTitle: "Create your account",
      welcomeBackTitle: "Welcome back",
      emailLabel: "Email Address",
      passwordLabel: "Password",
      authenticating: "Authenticating...",
      createAccountButton: "Create Account",
      loginButton: "Log In",
      alreadyHaveAccount: "Already have an account?",
      dontHaveAccount: "Don't have an account?",
      signUp: "Sign Up",
      logIn: "Log In",
      registrationDisabled: "Account creation is currently disabled by the administrator.",
    },
    topbar: {
      home: "Home",
      notes: "Notes",
      discussion: "Discussion",
      profile: "Profile",
      adminPanel: "Admin Panel",
      admin: "Admin",
      dev: "Dev",
      logout: "Logout",
    },
    sidebar: {
      notes: "Notes",
      newNote: "+ New Note",
      settings: "Settings",
    },
    noteList: {
      canvasAwaits: "Your Canvas Awaits... üé®",
      startCreating: "Click \"+ New Note\" to bring your ideas to life!",
      noContent: "No content",
      summary: "Summary:",
      summarizing: "Summarizing...",
      summarize: "Summarize",
      share: "Share",
      deleteNote: "Delete note",
    },
    editor: {
      titlePlaceholder: "Note Title",
      edit: "Edit",
      split: "Split",
      preview: "Preview",
      insertEmoji: "Insert emoji",
      insertGif: "Insert GIF",
      markdownHelp: "Markdown help",
      contentPlaceholder: "Start writing your note...",
      noNoteSelected: "Select a note to begin üìù or create a new one!",
    },
    modals: {
      settings: {
        title: "Settings",
        selectTheme: "Select a Theme",
        selectCursor: "Select a Cursor",
        cursorColor: "Color:",
        selectLanguage: "Select a Language",
      },
      share: {
        title: "Share:",
        shareableLink: "Shareable Link",
        copy: "Copy",
        copied: "Copied!",
        emailTitle: "Or send via Email",
        emailPlaceholder: "recipient@example.com",
      },
      gif: {
        title: "Search GIFs",
        close: "Close GIF picker",
        searchPlaceholder: "Search for a GIF...",
        loading: "Loading...",
        noResults: "No GIFs found for your search.",
        error: "Failed to fetch GIFs. Please try again.",
      },
      markdownHelp: {
        title: "Markdown Syntax Guide",
        close: "Close help",
        emphasis: "Emphasis",
        bold: "bold text",
        italic: "italic text",
        strikethrough: "strikethrough",
        headings: "Headings",
        lists: "Lists",
        unorderedItem: "Unordered list item",
        orderedItem: "Ordered list item",
        linksAndImages: "Links & Images",
        linkText: "Link text",
        altText: "Alt text",
        code: "Code",
        inlineCode: "inline code",
        codeBlock: "code block",
        other: "Other",
        blockquote: "Blockquote",
        horizontalRule: "horizontal rule",
        gotIt: "Got it!",
      },
      newCommunity: {
        title: "Create a New Community",
        namePlaceholder: "Community Name (e.g., 'Project_Phoenix')",
        descriptionPlaceholder: "What is this community about?",
        create: "Create Community",
      },
      newThread: {
        title: "Start a New Discussion",
        titlePlaceholder: "Discussion Title",
        contentPlaceholder: "What's on your mind?",
        create: "Create Thread",
      },
      submitPublication: {
        title: "Submit an Announcement",
        titlePlaceholder: "Announcement Title",
        contentPlaceholder: "Your message here... (Markdown supported)",
        submit: "Submit for Review",
        note: "Note: Your submission will be reviewed by an administrator before it is published."
      },
    },
    pages: {
      home: {
        welcome: "Welcome back, {{displayName}}!",
        prompt: "Ready to capture your next big idea?",
        totalNotes: "Total Notes",
        totalWords: "Total Words Written",
        notesSummarized: "Notes Summarized",
        lastActivity: "Last Activity",
        createNote: "+ Create New Note",
        publicationsBoard: "Publications Board",
        submitAnnouncement: "Submit an Announcement",
        noPublications: "No announcements yet. Check back soon!",
        publishedBy: "Published by {{authorDisplayName}} on {{date}}",
      },
      profile: {
        editTitle: "Edit Profile",
        displayName: "Display Name",
        username: "Username",
        email: "Email Address",
        profilePicture: "Profile Picture",
        changePhoto: "Change",
        bio: "Bio",
        save: "Save Profile",
        totalNotes: "Total Notes Created",
        totalWords: "Total Words Written",
        avgWords: "Average Words per Note",
        notesSummarized: "Notes Summarized",
        backToNotes: "Back to Notes",
        noBio: "No bio yet. Click \"Edit Profile\" to add one.",
        editButton: "Edit Profile",
      },
      admin: {
        title: "Admin Dashboard",
        backToNotes: "Back to Notes",
        totalUsers: "Total Registered Users",
        totalNotes: "Total Notes Created",
        configTitle: "Web Configuration",
        appName: "Application Name",
        allowRegistrations: "Allow New User Registrations",
        saveConfig: "Save Config",
        userManagement: "User Management",
        displayName: "Display Name",
        email: "Email",
        role: "Role",
        actions: "Actions",
        makeAdmin: "Make Admin",
        makeDev: "Make Dev",
        makeUser: "Make User",
        setRoleByEmail: "Set User Role by Email",
        setRole: "Set Role",
        setRoleNote: "Note: This grants privileges to an email address. If the user doesn't exist, they will get the role upon signing up.",
        publicationsManagement: "Publications Management",
        pendingSubmissions: "Pending Submissions",
        submittedBy: "Submitted By",
        noPending: "No pending submissions.",
        createPublication: "Create New Publication",
        publicationTitle: "Publication Title",
        publicationContent: "Content (Markdown)",
        publishedAnnouncements: "Published Announcements",
        noPublished: "No announcements have been published yet.",
      },
      discussion: {
        hubTitle: "Discussions Hub",
        createCommunity: "+ Create Community",
        general: "General Discussion",
        generalDescription: "Talk about anything and everything.",
        noCommunities: "No communities yet. Create one to get started!",
        threads: "Threads",
        startNew: "+ Start New",
        selectHubFirst: "Select a discussion hub first",
        startNewDiscussion: "Start New Discussion",
        noDiscussions: "No discussions here yet. Be the first to start one!",
        exploreTitle: "Explore Discussions üó∫Ô∏è",
        exploreDescription: "Select a community or \"General Discussion\" to dive in.",
        canvasTitle: "Welcome to the Discussion Hub! üí¨",
        canvasDescription: "Select a thread to join the conversation, or start your own! üöÄ",
        startedBy: "Started by {{authorDisplayName}} on {{date}}",
        replyPlaceholder: "Write a reply...",
        sendReply: "Send Reply",
      },
      sharedNote: {
        backToNotes: "Back to My Notes",
        lastUpdated: "Last updated:",
      },
    }
  },
  fr: {
    common: {
      notes: "Notes",
      save: "Enregistrer",
      cancel: "Annuler",
      close: "Fermer",
      delete: "Supprimer",
      untitledNote: "Note sans titre",
      newNote: "Nouvelle note",
      loading: "Chargement...",
      by: "Par",
      post: "message",
      posts: "messages",
      send: "Envoyer",
      publish: "Publier",
      reject: "Rejeter",
      back: "Retour",
    },
    auth: {
      createAccountTitle: "Cr√©ez votre compte",
      welcomeBackTitle: "Bon retour",
      emailLabel: "Adresse e-mail",
      passwordLabel: "Mot de passe",
      authenticating: "Authentification...",
      createAccountButton: "Cr√©er un compte",
      loginButton: "Se connecter",
      alreadyHaveAccount: "Vous avez d√©j√† un compte ?",
      dontHaveAccount: "Vous n'avez pas de compte ?",
      signUp: "S'inscrire",
      logIn: "Se connecter",
      registrationDisabled: "La cr√©ation de compte est actuellement d√©sactiv√©e par l'administrateur.",
    },
    topbar: {
      home: "Accueil",
      notes: "Notes",
      discussion: "Discussion",
      profile: "Profil",
      adminPanel: "Panneau d'administration",
      admin: "Admin",
      dev: "Dev",
      logout: "D√©connexion",
    },
    sidebar: {
      notes: "Notes",
      newNote: "+ Nouvelle Note",
      settings: "Param√®tres",
    },
    noteList: {
      canvasAwaits: "Votre toile n'attend que vous... üé®",
      startCreating: "Cliquez sur \"+ Nouvelle Note\" pour donner vie √† vos id√©es !",
      noContent: "Pas de contenu",
      summary: "R√©sum√© :",
      summarizing: "R√©sum√© en cours...",
      summarize: "R√©sumer",
      share: "Partager",
      deleteNote: "Supprimer la note",
    },
    editor: {
      titlePlaceholder: "Titre de la note",
      edit: "√âditer",
      split: "Diviser",
      preview: "Aper√ßu",
      insertEmoji: "Ins√©rer un emoji",
      insertGif: "Ins√©rer un GIF",
      markdownHelp: "Aide Markdown",
      contentPlaceholder: "Commencez √† √©crire votre note...",
      noNoteSelected: "S√©lectionnez une note pour commencer üìù ou cr√©ez-en une nouvelle !",
    },
    modals: {
      settings: {
        title: "Param√®tres",
        selectTheme: "S√©lectionnez un th√®me",
        selectCursor: "S√©lectionnez un curseur",
        cursorColor: "Couleur :",
        selectLanguage: "S√©lectionnez une langue",
      },
      share: {
        title: "Partager :",
        shareableLink: "Lien partageable",
        copy: "Copier",
        copied: "Copi√© !",
        emailTitle: "Ou envoyer par e-mail",
        emailPlaceholder: "destinataire@example.com",
      },
      gif: {
        title: "Rechercher des GIFs",
        close: "Fermer le s√©lecteur de GIF",
        searchPlaceholder: "Rechercher un GIF...",
        loading: "Chargement...",
        noResults: "Aucun GIF trouv√© pour votre recherche.",
        error: "√âchec de la r√©cup√©ration des GIFs. Veuillez r√©essayer.",
      },
      markdownHelp: {
        title: "Guide de la syntaxe Markdown",
        close: "Fermer l'aide",
        emphasis: "Mise en √©vidence",
        bold: "texte en gras",
        italic: "texte en italique",
        strikethrough: "texte barr√©",
        headings: "Titres",
        lists: "Listes",
        unorderedItem: "√âl√©ment de liste non ordonn√©e",
        orderedItem: "√âl√©ment de liste ordonn√©e",
        linksAndImages: "Liens et Images",
        linkText: "Texte du lien",
        altText: "Texte alternatif",
        code: "Code",
        inlineCode: "code en ligne",
        codeBlock: "bloc de code",
        other: "Autre",
        blockquote: "Citation",
        horizontalRule: "ligne horizontale",
        gotIt: "Compris !",
      },
      newCommunity: {
        title: "Cr√©er une nouvelle communaut√©",
        namePlaceholder: "Nom de la communaut√© (ex: 'Projet_Phoenix')",
        descriptionPlaceholder: "De quoi parle cette communaut√© ?",
        create: "Cr√©er la communaut√©",
      },
      newThread: {
        title: "D√©marrer une nouvelle discussion",
        titlePlaceholder: "Titre de la discussion",
        contentPlaceholder: "√Ä quoi pensez-vous ?",
        create: "Cr√©er le fil",
      },
      submitPublication: {
        title: "Soumettre une annonce",
        titlePlaceholder: "Titre de l'annonce",
        contentPlaceholder: "Votre message ici... (Markdown pris en charge)",
        submit: "Soumettre pour examen",
        note: "Note : Votre soumission sera examin√©e par un administrateur avant d'√™tre publi√©e."
      },
    },
    pages: {
      home: {
        welcome: "Bon retour, {{displayName}} !",
        prompt: "Pr√™t √† capturer votre prochaine grande id√©e ?",
        totalNotes: "Total des notes",
        totalWords: "Total des mots √©crits",
        notesSummarized: "Notes r√©sum√©es",
        lastActivity: "Derni√®re activit√©",
        createNote: "+ Cr√©er une nouvelle note",
        publicationsBoard: "Tableau des publications",
        submitAnnouncement: "Soumettre une annonce",
        noPublications: "Aucune annonce pour le moment. Revenez bient√¥t !",
        publishedBy: "Publi√© par {{authorDisplayName}} le {{date}}",
      },
      profile: {
        editTitle: "Modifier le profil",
        displayName: "Nom d'affichage",
        username: "Nom d'utilisateur",
        email: "Adresse e-mail",
        profilePicture: "Photo de profil",
        changePhoto: "Changer",
        bio: "Bio",
        save: "Enregistrer le profil",
        totalNotes: "Total des notes cr√©√©es",
        totalWords: "Total des mots √©crits",
        avgWords: "Moyenne de mots par note",
        notesSummarized: "Notes r√©sum√©es",
        backToNotes: "Retour aux notes",
        noBio: "Pas encore de bio. Cliquez sur \"Modifier le profil\" pour en ajouter une.",
        editButton: "Modifier le profil",
      },
      admin: {
        title: "Tableau de bord admin",
        backToNotes: "Retour aux notes",
        totalUsers: "Total des utilisateurs enregistr√©s",
        totalNotes: "Total des notes cr√©√©es",
        configTitle: "Configuration Web",
        appName: "Nom de l'application",
        allowRegistrations: "Autoriser les nouvelles inscriptions d'utilisateurs",
        saveConfig: "Enregistrer la configuration",
        userManagement: "Gestion des utilisateurs",
        displayName: "Nom d'affichage",
        email: "E-mail",
        role: "R√¥le",
        actions: "Actions",
        makeAdmin: "Rendre Admin",
        makeDev: "Rendre Dev",
        makeUser: "Rendre Utilisateur",
        setRoleByEmail: "D√©finir le r√¥le par e-mail",
        setRole: "D√©finir le r√¥le",
        setRoleNote: "Note : Ceci accorde des privil√®ges √† une adresse e-mail. Si l'utilisateur n'existe pas, il obtiendra le r√¥le lors de son inscription.",
        publicationsManagement: "Gestion des publications",
        pendingSubmissions: "Soumissions en attente",
        submittedBy: "Soumis par",
        noPending: "Aucune soumission en attente.",
        createPublication: "Cr√©er une nouvelle publication",
        publicationTitle: "Titre de la publication",
        publicationContent: "Contenu (Markdown)",
        publishedAnnouncements: "Annonces publi√©es",
        noPublished: "Aucune annonce n'a encore √©t√© publi√©e.",
      },
      discussion: {
        hubTitle: "Hub de discussions",
        createCommunity: "+ Cr√©er une communaut√©",
        general: "Discussion g√©n√©rale",
        generalDescription: "Parlez de tout et de rien.",
        noCommunities: "Aucune communaut√© pour le moment. Cr√©ez-en une pour commencer !",
        threads: "Fils de discussion",
        startNew: "+ D√©marrer",
        selectHubFirst: "S√©lectionnez d'abord un hub de discussion",
        startNewDiscussion: "D√©marrer une nouvelle discussion",
        noDiscussions: "Aucune discussion ici pour le moment. Soyez le premier √† en d√©marrer une !",
        exploreTitle: "Explorez les Discussions üó∫Ô∏è",
        exploreDescription: "S√©lectionnez une communaut√© ou \"Discussion g√©n√©rale\" pour plonger dans le vif du sujet.",
        canvasTitle: "Bienvenue au Hub de Discussion ! üí¨",
        canvasDescription: "S√©lectionnez un fil pour rejoindre la conversation, ou lancez le v√¥tre ! üöÄ",
        startedBy: "D√©marr√© par {{authorDisplayName}} le {{date}}",
        replyPlaceholder: "√âcrire une r√©ponse...",
        sendReply: "Envoyer la r√©ponse",
      },
      sharedNote: {
        backToNotes: "Retour √† mes notes",
        lastUpdated: "Derni√®re mise √† jour :",
      },
    }
  },
  zh: {
    common: {
      notes: "Á¨îËÆ∞",
      save: "‰øùÂ≠ò",
      cancel: "ÂèñÊ∂à",
      close: "ÂÖ≥Èó≠",
      delete: "Âà†Èô§",
      untitledNote: "Êó†Ê†áÈ¢òÁ¨îËÆ∞",
      newNote: "Êñ∞Âª∫Á¨îËÆ∞",
      loading: "Âä†ËΩΩ‰∏≠...",
      by: "Áî±",
      post: "Â∏ñÂ≠ê",
      posts: "Â∏ñÂ≠ê",
      send: "ÂèëÈÄÅ",
      publish: "ÂèëÂ∏É",
      reject: "ÊãíÁªù",
      back: "ËøîÂõû",
    },
    auth: {
      createAccountTitle: "ÂàõÂª∫ÊÇ®ÁöÑÂ∏êÊà∑",
      welcomeBackTitle: "Ê¨¢ËøéÂõûÊù•",
      emailLabel: "ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ",
      passwordLabel: "ÂØÜÁ†Å",
      authenticating: "È™åËØÅ‰∏≠...",
      createAccountButton: "ÂàõÂª∫Â∏êÊà∑",
      loginButton: "ÁôªÂΩï",
      alreadyHaveAccount: "Â∑≤ÁªèÊúâÂ∏êÊà∑‰∫ÜÔºü",
      dontHaveAccount: "Ê≤°ÊúâÂ∏êÊà∑Ôºü",
      signUp: "Ê≥®ÂÜå",
      logIn: "ÁôªÂΩï",
      registrationDisabled: "ÁÆ°ÁêÜÂëòÂΩìÂâçÂ∑≤Á¶ÅÁî®Â∏êÊà∑ÂàõÂª∫„ÄÇ"
    },
    topbar: {
      home: "‰∏ªÈ°µ",
      notes: "Á¨îËÆ∞",
      discussion: "ËÆ®ËÆ∫",
      profile: "‰∏™‰∫∫ËµÑÊñô",
      adminPanel: "ÁÆ°ÁêÜÈù¢Êùø",
      admin: "ÁÆ°ÁêÜÂëò",
      dev: "ÂºÄÂèëËÄÖ",
      logout: "ÁôªÂá∫"
    },
    sidebar: {
      notes: "Á¨îËÆ∞",
      newNote: "+ Êñ∞Âª∫Á¨îËÆ∞",
      settings: "ËÆæÁΩÆ"
    },
    noteList: {
      canvasAwaits: "‰Ω†ÁöÑÁîªÂ∏ÉÊ≠£Á≠âÂæÖÁùÄ... üé®",
      startCreating: "ÁÇπÂáª‚Äú+ Êñ∞Âª∫Á¨îËÆ∞‚ÄùÔºåËÆ©‰Ω†ÁöÑÊÉ≥Ê≥ïÂèò‰∏∫Áé∞ÂÆûÔºÅ",
      noContent: "Êó†ÂÜÖÂÆπ",
      summary: "ÊëòË¶ÅÔºö",
      summarizing: "Ê≠£Âú®ÁîüÊàêÊëòË¶Å...",
      summarize: "ÁîüÊàêÊëòË¶Å",
      share: "ÂàÜ‰∫´",
      deleteNote: "Âà†Èô§Á¨îËÆ∞"
    },
    editor: {
      titlePlaceholder: "Á¨îËÆ∞Ê†áÈ¢ò",
      edit: "ÁºñËæë",
      split: "ÂàÜÂ±è",
      preview: "È¢ÑËßà",
      insertEmoji: "ÊèíÂÖ•Ë°®ÊÉÖÁ¨¶Âè∑",
      insertGif: "ÊèíÂÖ•GIF",
      markdownHelp: "MarkdownÂ∏ÆÂä©",
      contentPlaceholder: "ÂºÄÂßãÂÜôÁ¨îËÆ∞...",
      noNoteSelected: "ÈÄâÊã©‰∏ÄÁØáÁ¨îËÆ∞ÂºÄÂßã üìù ÊàñÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÔºÅ"
    },
    modals: {
      settings: {
        title: "ËÆæÁΩÆ",
        selectTheme: "ÈÄâÊã©‰∏ªÈ¢ò",
        selectCursor: "ÈÄâÊã©ÂÖâÊ†á",
        cursorColor: "È¢úËâ≤Ôºö",
        selectLanguage: "ÈÄâÊã©ËØ≠Ë®Ä"
      },
      share: {
        title: "ÂàÜ‰∫´Ôºö",
        shareableLink: "ÂèØÂàÜ‰∫´ÈìæÊé•",
        copy: "Â§çÂà∂",
        copied: "Â∑≤Â§çÂà∂ÔºÅ",
        emailTitle: "ÊàñÈÄöËøáÁîµÂ≠êÈÇÆ‰ª∂ÂèëÈÄÅ",
        emailPlaceholder: "recipient@example.com"
      },
      gif: {
        title: "ÊêúÁ¥¢GIF",
        close: "ÂÖ≥Èó≠GIFÈÄâÊã©Âô®",
        searchPlaceholder: "ÊêúÁ¥¢GIF...",
        loading: "Âä†ËΩΩ‰∏≠...",
        noResults: "Êú™ÊâæÂà∞‰∏éÊÇ®ÊêúÁ¥¢Áõ∏ÂÖ≥ÁöÑGIF„ÄÇ",
        error: "Ëé∑ÂèñGIFÂ§±Ë¥•„ÄÇËØ∑ÈáçËØï„ÄÇ"
      },
      markdownHelp: {
        title: "MarkdownËØ≠Ê≥ïÊåáÂçó",
        close: "ÂÖ≥Èó≠Â∏ÆÂä©",
        emphasis: "Âº∫Ë∞É",
        bold: "Á≤ó‰ΩìÊñáÊú¨",
        italic: "Êñú‰ΩìÊñáÊú¨",
        strikethrough: "Âà†Èô§Á∫ø",
        headings: "Ê†áÈ¢ò",
        lists: "ÂàóË°®",
        unorderedItem: "Êó†Â∫èÂàóË°®È°π",
        orderedItem: "ÊúâÂ∫èÂàóË°®È°π",
        linksAndImages: "ÈìæÊé•ÂíåÂõæÁâá",
        linkText: "ÈìæÊé•ÊñáÊú¨",
        altText: "Êõø‰ª£ÊñáÊú¨",
        code: "‰ª£Á†Å",
        inlineCode: "Ë°åÂÜÖ‰ª£Á†Å",
        codeBlock: "‰ª£Á†ÅÂùó",
        other: "ÂÖ∂‰ªñ",
        blockquote: "ÂùóÂºïÁî®",
        horizontalRule: "Ê∞¥Âπ≥Á∫ø",
        gotIt: "Â•ΩÁöÑÔºÅ"
      },
      newCommunity: {
          title: "ÂàõÂª∫Êñ∞Á§æÂå∫",
          namePlaceholder: "Á§æÂå∫ÂêçÁß∞Ôºà‰æãÂ¶Ç 'Project_Phoenix'Ôºâ",
          descriptionPlaceholder: "Ëøô‰∏™Á§æÂå∫ÊòØÂÖ≥‰∫é‰ªÄ‰πàÁöÑÔºü",
          create: "ÂàõÂª∫Á§æÂå∫"
      },
      newThread: {
          title: "ÂºÄÂßãÊñ∞ËÆ®ËÆ∫",
          titlePlaceholder: "ËÆ®ËÆ∫Ê†áÈ¢ò",
          contentPlaceholder: "ÊÇ®Âú®ÊÉ≥‰ªÄ‰πàÔºü",
          create: "ÂàõÂª∫‰∏ªÈ¢ò"
      },
      submitPublication: {
        title: "Êèê‰∫§ÂÖ¨Âëä",
        titlePlaceholder: "ÂÖ¨ÂëäÊ†áÈ¢ò",
        contentPlaceholder: "ÊÇ®ÁöÑÊ∂àÊÅØ... (ÊîØÊåÅMarkdown)",
        submit: "Êèê‰∫§ÂÆ°Ê†∏",
        note: "Ê≥®ÊÑèÔºöÊÇ®ÁöÑÊèê‰∫§ÂÜÖÂÆπÂ∞ÜÂú®ÂèëÂ∏ÉÂâçÁî±ÁÆ°ÁêÜÂëòÂÆ°Ê†∏„ÄÇ"
      },
    },
    pages: {
      home: {
        welcome: "Ê¨¢ËøéÂõûÊù•Ôºå{{displayName}}ÔºÅ",
        prompt: "ÂáÜÂ§áÂ•ΩÊçïÊçâÊÇ®ÁöÑ‰∏ã‰∏Ä‰∏™‰ºüÂ§ßÊÉ≥Ê≥ï‰∫ÜÂêóÔºü",
        totalNotes: "ÊÄªÁ¨îËÆ∞Êï∞",
        totalWords: "ÊÄªÂ≠óÊï∞",
        notesSummarized: "Â∑≤ÊëòË¶ÅÁ¨îËÆ∞Êï∞",
        lastActivity: "ÊúÄÂêéÊ¥ªÂä®",
        createNote: "+ ÂàõÂª∫Êñ∞Á¨îËÆ∞",
        publicationsBoard: "ÂÖ¨ÂëäÊùø",
        submitAnnouncement: "Êèê‰∫§ÂÖ¨Âëä",
        noPublications: "ÊöÇÊó†ÂÖ¨Âëä„ÄÇËØ∑Á®çÂêéÂÜçÂõûÊù•Êü•ÁúãÔºÅ",
        publishedBy: "Áî± {{authorDisplayName}} ÂèëÂ∏É‰∫é {{date}}",
      },
      profile: {
        editTitle: "ÁºñËæë‰∏™‰∫∫ËµÑÊñô",
        displayName: "ÊòæÁ§∫ÂêçÁß∞",
        username: "Áî®Êà∑Âêç",
        email: "ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ",
        profilePicture: "‰∏™‰∫∫ËµÑÊñôÂõæÁâá",
        changePhoto: "Êõ¥Êîπ",
        bio: "‰∏™‰∫∫ÁÆÄ‰ªã",
        save: "‰øùÂ≠ò‰∏™‰∫∫ËµÑÊñô",
        totalNotes: "ÂàõÂª∫ÁöÑÊÄªÁ¨îËÆ∞Êï∞",
        totalWords: "ÊÄªÂ≠óÊï∞",
        avgWords: "ÊØèÁØáÁ¨îËÆ∞Âπ≥ÂùáÂ≠óÊï∞",
        notesSummarized: "Â∑≤ÊëòË¶ÅÁ¨îËÆ∞Êï∞",
        backToNotes: "ËøîÂõûÁ¨îËÆ∞",
        noBio: "ÊöÇÊó†ÁÆÄ‰ªã„ÄÇÁÇπÂáª‚ÄúÁºñËæë‰∏™‰∫∫ËµÑÊñô‚ÄùÊ∑ªÂä†‰∏Ä‰∏™„ÄÇ",
        editButton: "ÁºñËæë‰∏™‰∫∫ËµÑÊñô"
      },
      admin: {
        title: "ÁÆ°ÁêÜ‰ª™Ë°®Êùø",
        backToNotes: "ËøîÂõûÁ¨îËÆ∞",
        totalUsers: "ÊÄªÊ≥®ÂÜåÁî®Êà∑Êï∞",
        totalNotes: "ÂàõÂª∫ÁöÑÊÄªÁ¨îËÆ∞Êï∞",
        configTitle: "ÁΩëÁ´ôÈÖçÁΩÆ",
        appName: "Â∫îÁî®ÂêçÁß∞",
        allowRegistrations: "ÂÖÅËÆ∏Êñ∞Áî®Êà∑Ê≥®ÂÜå",
        saveConfig: "‰øùÂ≠òÈÖçÁΩÆ",
        userManagement: "Áî®Êà∑ÁÆ°ÁêÜ",
        displayName: "ÊòæÁ§∫ÂêçÁß∞",
        email: "ÁîµÂ≠êÈÇÆ‰ª∂",
        role: "ËßíËâ≤",
        actions: "Êìç‰Ωú",
        makeAdmin: "ËÆæ‰∏∫ÁÆ°ÁêÜÂëò",
        makeDev: "ËÆæ‰∏∫ÂºÄÂèëËÄÖ",
        makeUser: "ËÆæ‰∏∫Áî®Êà∑",
        setRoleByEmail: "ÈÄöËøáÁîµÂ≠êÈÇÆ‰ª∂ËÆæÁΩÆÁî®Êà∑ËßíËâ≤",
        setRole: "ËÆæÁΩÆËßíËâ≤",
        setRoleNote: "Ê≥®ÊÑèÔºöËøôÂ∞ÜÊéà‰∫àÊùÉÈôêÁªô‰∏Ä‰∏™ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ„ÄÇÂ¶ÇÊûúÁî®Êà∑‰∏çÂ≠òÂú®Ôºå‰ªñ‰ª¨Â∞ÜÂú®Ê≥®ÂÜåÊó∂Ëé∑ÂæóËØ•ËßíËâ≤„ÄÇ",
        publicationsManagement: "ÂÖ¨ÂëäÁÆ°ÁêÜ",
        pendingSubmissions: "ÂæÖÂÆ°Ê†∏ÁöÑÊèê‰∫§",
        submittedBy: "Êèê‰∫§ËÄÖ",
        noPending: "Ê≤°ÊúâÂæÖÂ§ÑÁêÜÁöÑÊèê‰∫§„ÄÇ",
        createPublication: "ÂàõÂª∫Êñ∞ÂÖ¨Âëä",
        publicationTitle: "ÂÖ¨ÂëäÊ†áÈ¢ò",
        publicationContent: "ÂÜÖÂÆπ (Markdown)",
        publishedAnnouncements: "Â∑≤ÂèëÂ∏ÉÁöÑÂÖ¨Âëä",
        noPublished: "Â∞öÊú™ÂèëÂ∏É‰ªª‰ΩïÂÖ¨Âëä„ÄÇ",
      },
      discussion: {
        hubTitle: "ËÆ®ËÆ∫‰∏≠ÂøÉ",
        createCommunity: "+ ÂàõÂª∫Á§æÂå∫",
        general: "ÁªºÂêàËÆ®ËÆ∫",
        generalDescription: "Ë∞àÂ§©ËØ¥Âú∞ÔºåÊó†ÊâÄ‰∏çÂåÖ„ÄÇ",
        noCommunities: "ËøòÊ≤°ÊúâÁ§æÂå∫„ÄÇÂàõÂª∫‰∏Ä‰∏™ÂºÄÂßãÂêßÔºÅ",
        threads: "‰∏ªÈ¢ò",
        startNew: "+ ÂºÄÂßãÊñ∞‰∏ªÈ¢ò",
        selectHubFirst: "ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ËÆ®ËÆ∫‰∏≠ÂøÉ",
        startNewDiscussion: "ÂºÄÂßãÊñ∞ËÆ®ËÆ∫",
        noDiscussions: "ËøôÈáåËøòÊ≤°ÊúâËÆ®ËÆ∫„ÄÇÊàê‰∏∫Á¨¨‰∏Ä‰∏™ÂèëËµ∑ËÆ®ËÆ∫ÁöÑ‰∫∫ÂêßÔºÅ",
        exploreTitle: "Êé¢Á¥¢ËÆ®ËÆ∫Âå∫ üó∫Ô∏è",
        exploreDescription: "ÈÄâÊã©‰∏Ä‰∏™Á§æÂå∫Êàñ‚ÄúÁªºÂêàËÆ®ËÆ∫‚ÄùÂºÄÂßãÊé¢Á¥¢„ÄÇ",
        canvasTitle: "Ê¨¢ËøéÊù•Âà∞ËÆ®ËÆ∫‰∏≠ÂøÉÔºÅüí¨",
        canvasDescription: "ÈÄâÊã©‰∏Ä‰∏™‰∏ªÈ¢òÂä†ÂÖ•ÂØπËØùÔºåÊàñËÄÖÂèëËµ∑‰Ω†Ëá™Â∑±ÁöÑ‰∏ªÈ¢òÔºÅüöÄ",
        startedBy: "Áî± {{authorDisplayName}} ‰∫é {{date}} ÂèëËµ∑",
        replyPlaceholder: "ÂÜô‰∏ãÂõûÂ§ç...",
        sendReply: "ÂèëÈÄÅÂõûÂ§ç"
      },
      sharedNote: {
        backToNotes: "ËøîÂõûÊàëÁöÑÁ¨îËÆ∞",
        lastUpdated: "ÊúÄÂêéÊõ¥Êñ∞Ôºö"
      }
    }
  }
};

interface LanguageContextType {
  t: (key: string, replacements?: { [key: string]: string }) => string;
  language: Language;
}

export const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useTranslation = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useTranslation must be used within a LanguageProvider');
  }
  return context;
};


type AppView = 'home' | 'notes' | 'discussion' | 'profile' | 'admin';
type MobileNotesView = 'list' | 'editor';

const App: React.FC = () => {
  const [notes, setNotes] = useState<Note[]>([]);
  const [selectedNoteId, setSelectedNoteId] = useState<string | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [isSummarizing, setIsSummarizing] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const [noteToShare, setNoteToShare] = useState<Note | null>(null);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [activeView, setActiveView] = useState<AppView>('home');
  const [sharedNoteFromUrl, setSharedNoteFromUrl] = useState<Note | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [allUsers, setAllUsers] = useState<User[]>([]);
  const [allNotes, setAllNotes] = useState<Note[]>([]);
  const [threads, setThreads] = useState<DiscussionThread[]>([]);
  const [communities, setCommunities] = useState<Community[]>([]);
  const [webConfig, setWebConfig] = useState<WebConfig | null>(null);
  const [publications, setPublications] = useState<Publication[]>([]);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const [mobileNotesView, setMobileNotesView] = useState<MobileNotesView>('list');

  const selectedNote = useMemo(() => notes.find(note => note.id === selectedNoteId), [notes, selectedNoteId]);

  const currentTheme = useMemo(() => {
    const themeName = user?.themeName || 'NexaDark';
    return appThemes.find(t => t.name === themeName) || appThemes[0];
  }, [user]);
  
  const cursorStyle = useMemo(() => user?.cursorStyle || 'default', [user]);
  const cursorColor = useMemo(() => user?.cursorColor || '#FFFFFF', [user]);
  const language = useMemo(() => user?.language || 'en', [user]);

  const t = useCallback((key: string, replacements?: { [key: string]: string }) => {
    const findString = (langData: any, keys: string[]): string | undefined => {
        let result = langData;
        for (const k of keys) {
            if (result && typeof result === 'object' && k in result) {
                result = result[k];
            } else {
                return undefined;
            }
        }
        return typeof result === 'string' ? result : undefined;
    };
    
    const keys = key.split('.');
    let text = findString(translations[language], keys) || findString(translations.en, keys) || key;

    if (replacements) {
        Object.keys(replacements).forEach(rKey => {
            text = text.replace(new RegExp(`{{${rKey}}}`, 'g'), replacements[rKey]);
        });
    }

    return text;
  }, [language]);


  const loadAppData = useCallback(async (loggedInUser: User) => {
    setIsLoading(true);
    const [userNotes, discussionThreads, discussionCommunities, allPublications] = await Promise.all([
      backstage.getNotes(loggedInUser.email),
      backstage.getThreads(),
      backstage.getCommunities(),
      backstage.getPublications(),
    ]);

    setNotes(userNotes);
    setThreads(discussionThreads);
    setCommunities(discussionCommunities);
    setPublications(allPublications);
    
    if (activeView === 'notes' && userNotes.length > 0 && !isMobile) {
      setSelectedNoteId(userNotes[0].id);
    }
    
    if (loggedInUser.role === 'admin' || loggedInUser.role === 'dev') {
      const [allUsersData, allNotesData] = await Promise.all([
        backstage.getAllUsers(),
        backstage.getAllNotes(),
      ]);
      setAllUsers(allUsersData);
      setAllNotes(allNotesData);
    }
    setIsLoading(false);
  }, [activeView, isMobile]);

  useEffect(() => {
    const handleResize = () => {
        setIsMobile(window.innerWidth <= 768);
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    const initializeApp = async () => {
      const config = await backstage.getWebConfig();
      setWebConfig(config);
      const sessionUser = await backstage.getCurrentUser();
      if (sessionUser) {
        setUser(sessionUser);
        await loadAppData(sessionUser);
      } else {
        setIsLoading(false);
      }
    };
    initializeApp();
  }, [loadAppData]);

  useEffect(() => {
    const handleHashChange = () => {
      const hash = window.location.hash;
      if (hash.startsWith('#note=')) {
        try {
          const encodedNote = hash.substring('#note='.length);
          const decodedNoteString = decodeURIComponent(atob(encodedNote));
          const noteData: Note = JSON.parse(decodedNoteString);
          setSharedNoteFromUrl(noteData);
        } catch (error) {
          console.error("Failed to parse shared note from URL:", error);
          window.location.hash = '';
        }
      } else {
        setSharedNoteFromUrl(null);
      }
    };
    window.addEventListener('hashchange', handleHashChange);
    handleHashChange();
    return () => window.removeEventListener('hashchange', handleHashChange);
  }, []);

  useEffect(() => {
    const root = document.documentElement;
    Object.entries(currentTheme.colors).forEach(([key, value]) => {
      root.style.setProperty(key, value);
    });
  }, [currentTheme]);

  const handleAuth = useCallback(async (email: string) => {
    const result = await backstage.login(email);
    if (result.user) {
      setUser(result.user);
      await loadAppData(result.user);
      setActiveView('home');
      return null;
    }
    return result.error;
  }, [loadAppData]);

  const handleLogout = useCallback(async () => {
    await backstage.logout();
    setUser(null);
    setNotes([]);
    setSelectedNoteId(null);
    setActiveView('home');
  }, []);

  const handleNavigate = useCallback((view: AppView) => {
    setActiveView(view);
    if (view === 'notes' && notes.length > 0 && !isMobile) {
      setSelectedNoteId(notes[0].id);
    }
    if (view === 'notes') {
      setMobileNotesView('list');
    }
  }, [notes, isMobile]);

  const handleAddNote = useCallback(async () => {
    if (!user) return;
    const newNote = await backstage.createNote(user.email, t('common.untitledNote'), '');
    setNotes(prev => [newNote, ...prev]);
    setSelectedNoteId(newNote.id);
    setActiveView('notes');
    if (isMobile) {
      setMobileNotesView('editor');
    }
  }, [user, t, isMobile]);

  const handleSelectNote = useCallback((id: string) => {
    setSelectedNoteId(id);
    if(isMobile) {
      setMobileNotesView('editor');
    }
  }, [isMobile]);

  const handleBackToNoteList = useCallback(() => {
    setMobileNotesView('list');
  }, []);

  const handleUpdateNote = useCallback(async (updates: Partial<Note>) => {
    if (!selectedNoteId) return;
    setNotes(prev => prev.map(n => n.id === selectedNoteId ? { ...n, ...updates, updatedAt: new Date().toISOString() } : n));
    await backstage.updateNote(selectedNoteId, updates);
  }, [selectedNoteId]);

  const handleDeleteNote = useCallback(async (id: string) => {
    await backstage.deleteNote(id);
    const newNotes = notes.filter(n => n.id !== id);
    setNotes(newNotes);
    if (selectedNoteId === id) {
      setSelectedNoteId(newNotes.length > 0 ? newNotes[0].id : null);
      if (isMobile) {
        setMobileNotesView('list');
      }
    }
  }, [notes, selectedNoteId, isMobile]);

  const handleSummarizeNote = useCallback(async (id: string) => {
    const noteToSummarize = notes.find(n => n.id === id);
    if (!noteToSummarize || !noteToSummarize.content) return;
    setIsSummarizing(true);
    const summary = await summarizeNote(noteToSummarize.content);
    
    // update note in state without waiting for backstage
    setNotes(prev => prev.map(n => n.id === id ? { ...n, summary, updatedAt: new Date().toISOString() } : n));
    await backstage.updateNote(id, { summary });
    
    setIsSummarizing(false);
  }, [notes]);

  const handleShareNote = useCallback((id: string) => {
    const note = notes.find(n => n.id === id);
    if (note) {
      setNoteToShare(note);
      setIsShareModalOpen(true);
    }
  }, [notes]);

  const handleUpdateUserPreferences = useCallback(async (prefs: Partial<User>) => {
    if (!user) return;
    const { user: updatedUser } = await backstage.updateUser(user.email, prefs);
    if (updatedUser) setUser(updatedUser);
  }, [user]);

  const handleSaveProfile = useCallback(async (updatedData: Partial<User>) => {
    if (!user) return null;
    const result = await backstage.updateUser(user.email, updatedData);
    if (result.user) {
      setUser(result.user);
      return null;
    }
    return result.error;
  }, [user]);

  const handleCreateCommunity = useCallback(async (name: string, description: string) => {
    if (!user) return;
    const newCommunity = await backstage.createCommunity(name, description, user.email);
    setCommunities(prev => [newCommunity, ...prev]);
  }, [user]);

  const handleCreateThread = useCallback(async (communityId: string | null, title: string, content: string) => {
    if (!user) return;
    const newThread = await backstage.createThread(communityId, title, content, user);
    setThreads(prev => [newThread, ...prev]);
  }, [user]);

  const handleAddPost = useCallback(async (threadId: string, content: string) => {
    if (!user) return;
    const updatedThread = await backstage.addPostToThread(threadId, content, user);
    setThreads(prev => prev.map(t => t.id === threadId ? updatedThread : t));
  }, [user]);

  const handleToggleLike = useCallback(async (threadId: string, postId: string) => {
    if (!user) return;
    const updatedThread = await backstage.togglePostLike(threadId, postId, user.email);
    setThreads(prev => prev.map(t => t.id === threadId ? updatedThread : t));
  }, [user]);

  const handleDeleteUser = useCallback(async (email: string) => {
    await backstage.deleteUser(email);
    setAllUsers(prev => prev.filter(u => u.email !== email));
  }, []);

  const handleSetRole = useCallback(async (email: string, role: User['role']) => {
    await backstage.setUserRole(email, role);
    setAllUsers(prev => prev.map(u => u.email === email ? { ...u, role } : u));
  }, []);

  const handleUpdateWebConfig = useCallback(async (updates: Partial<WebConfig>) => {
    const newConfig = await backstage.updateWebConfig(updates);
    setWebConfig(newConfig);
  }, []);

  // Publication Handlers
  const handleSubmitPublication = useCallback(async (title: string, content: string) => {
    if (!user) return;
    const newProposal = await backstage.submitPublicationProposal(title, content, user);
    setPublications(prev => [newProposal, ...prev]);
  }, [user]);

  const handleCreateDirectPublication = useCallback(async (title: string, content: string) => {
    if (!user) return;
    const newPublication = await backstage.createDirectPublication(title, content, user);
    setPublications(prev => [newPublication, ...prev]);
  }, [user]);

  const handleReviewPublication = useCallback(async (id: string, publish: boolean) => {
    if (!user) return;
    const updatedPublications = await backstage.reviewPublication(id, publish, user);
    if (updatedPublications) {
      setPublications(updatedPublications);
    }
  }, [user]);

  const handleDeletePublication = useCallback(async (id: string) => {
    if (!user) return;
    const updatedPublications = await backstage.deletePublication(id, user);
    setPublications(updatedPublications);
  }, [user]);


  if (sharedNoteFromUrl) {
    return (
      <LanguageContext.Provider value={{ t, language }}>
        <SharedNoteViewer note={sharedNoteFromUrl} isLoggedIn={!!user} onGoToApp={() => window.location.hash = ''} appName={webConfig?.appName || "NexaNotes"} />
      </LanguageContext.Provider>
    );
  }
  
  if (isLoading && !user) {
    return <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', backgroundColor: '#121212', color: '#E0E0E0' }}>Loading NexaNotes...</div>;
  }
  
  return (
    <LanguageContext.Provider value={{ t, language }}>
      {!user || !webConfig ? (
         <>
          <CustomCursor cursorStyle={cursorStyle} cursorColor={cursorColor} />
          <Auth onAuth={handleAuth} appName={webConfig?.appName || "NexaNotes"} registrationEnabled={webConfig?.registrationEnabled ?? true} />
        </>
      ) : (
        <>
          <CustomCursor cursorStyle={cursorStyle} cursorColor={cursorColor} />
          <div className="app-wrapper">
            <TopBar 
              user={user} 
              onLogout={handleLogout} 
              activeView={activeView} 
              onNavigate={handleNavigate} 
              appName={webConfig.appName}
              onAddNote={handleAddNote}
              onOpenSettings={() => setIsSettingsOpen(true)}
            />
            
            {activeView === 'home' && <HomePage user={user} notes={notes} onNewNote={handleAddNote} publications={publications} onSubmitPublication={handleSubmitPublication} />}
            {activeView === 'profile' && <ProfilePage user={user} notes={notes} onGoToNotes={() => handleNavigate('notes')} onSaveProfile={handleSaveProfile} />}
            {activeView === 'admin' && <AdminDashboard allUsers={allUsers} allNotes={allNotes} onGoToNotes={() => handleNavigate('notes')} currentUser={user} onDeleteUser={handleDeleteUser} onSetRole={handleSetRole} webConfig={webConfig} onUpdateWebConfig={handleUpdateWebConfig} publications={publications} onCreatePublication={handleCreateDirectPublication} onReviewPublication={handleReviewPublication} onDeletePublication={handleDeletePublication} />}
            {activeView === 'discussion' && <DiscussionPage threads={threads} user={user} onCreateThread={handleCreateThread} onAddPost={handleAddPost} onToggleLike={handleToggleLike} communities={communities} onCreateCommunity={handleCreateCommunity} />}

            {activeView === 'notes' && (
               <div className={`app-container ${isMobile ? `mobile-view-${mobileNotesView}` : ''}`}>
                    <Sidebar 
                        onAddNote={handleAddNote}
                        isCollapsed={isSidebarCollapsed}
                        onToggle={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
                        onOpenSettings={() => setIsSettingsOpen(true)}
                    />
                    <main className="main-content">
                      <div className="content-area">
                        <NoteList 
                          notes={notes}
                          selectedNoteId={selectedNoteId}
                          onSelectNote={handleSelectNote}
                          onDeleteNote={handleDeleteNote}
                          onSummarizeNote={handleSummarizeNote}
                          onShareNote={handleShareNote}
                          isSummarizing={isSummarizing}
                        />
                        {selectedNote ? (
                          <NoteEditor 
                            note={selectedNote} 
                            onUpdateNote={handleUpdateNote} 
                            isMobile={isMobile}
                            onBack={handleBackToNoteList}
                          />
                        ) : (
                          <div className="no-note-selected">
                            <h2>{t('editor.noNoteSelected')}</h2>
                          </div>
                        )}
                      </div>
                    </main>
                </div>
            )}
          </div>
          <SettingsModal 
            isOpen={isSettingsOpen}
            onClose={() => setIsSettingsOpen(false)}
            themes={appThemes}
            currentTheme={currentTheme}
            onSelectTheme={(theme) => handleUpdateUserPreferences({ themeName: theme.name })}
            currentCursorStyle={cursorStyle}
            onSelectCursorStyle={(style) => handleUpdateUserPreferences({ cursorStyle: style })}
            currentCursorColor={cursorColor}
            onSelectCursorColor={(color) => handleUpdateUserPreferences({ cursorColor: color })}
            currentLanguage={language}
            onSelectLanguage={(lang) => handleUpdateUserPreferences({ language: lang })}
          />
          <ShareModal
            isOpen={isShareModalOpen}
            onClose={() => setIsShareModalOpen(false)}
            note={noteToShare}
          />
        </>
      )}
    </LanguageContext.Provider>
  );
};

export default App;